//par is parent of a node, lev is level of each node, P contains 2^i'th ancestor
void build(lo n, lo l, lo p){
    par[n]=p;
    lev[n]=l;
    P[n][0]=par[n];
    REP(1,log2n+1){
        if(P[n][i-1]!=-1)P[n][i]=P[P[n][i-1]][i-1];
    }
    REP(0,ve[n].size()){
        if(!visited[ve[n][i]]){
            visited[ve[n][i]]=1;
            build(ve[n][i],l+1,n);
        }
    }
}

lo lca(lo a, lo b){
    if(lev[a]<lev[b])swap(a,b);
    IREP(log2n,0){
        if(lev[P[a][i]]<lev[b])a=P[a][i];
    }
    if(a==b)return a;
    IREP(log2n,0){
        if(P[a][i]!=-1 && (P[a][i]!=P[b][i])){
            a = P[a][i];
            b=P[b][i];
        }
    }
    return par[a];
}
