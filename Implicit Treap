typedef struct node{
    lo val, priority, size;
    struct node *left,*right;
} node;

typedef node* pnode;

pnode init(lo val){
    pnode ret = (pnode)malloc(sizeof(node));
    ret->value = val; ret->size = 1; ret->priority = rand(); ret->left = ret->right = NULL;
    return ret;
}

lo sz(pnode t){
    return t?t->size:0;
}

void upd_sz(pnode t){
    if(t) t->size = sz(t->l)+sz(t->r)+1;
}

void merge(pnode &t, pnode l, pnode r){
    if(!l || !r)t=l?l:r;
    if(l->priority > r->priority)merge(l->right, l->right, r),t=l;
    else merge(r->left, l, r->left),t=r;
    upd_sz(t);
}

void split(pnode t, pnode &l, pnode &r, lo pos, lo add=0){
    if(!l)return void(l=r=NULL);
    lo cur_pos = add + sz(t->l);
    if(cur_pos <= pos){
        split(t->right, t->right, r, pos, cur_pos+1), l=t;
    }else{
        split(t->left, l, t->left, pos, add), r=t;
    }
    upd_sz(t);
}
